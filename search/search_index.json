{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido a Cuadrature-Tarea-2","text":""},{"location":"#problema","title":"Problema:","text":"<p>El prop\u00f3sito es aplicar el concepto de cuadratura Gaussiana para integraci\u00f3n utilizando los polinomios de Legendre. Mediante un script de python cuadrature.py que resuelve la siguiente integral utilizando el m\u00e9todo de cuadratura Gaussiana:</p> \\[\\begin{equation} I = \\int_{1}^{3} dx [x^6 - x^2 sin(2x)] \\end{equation}\\] <p>Cumpliendo los siguientes requisitos:</p> <ul> <li> <p>Escribir un script de python que ejecuta el m\u00e9todo num\u00e9rico y devuelve el resultado correcto.</p> </li> <li> <p>Que el script contenga una funcion que devuelve los pesos y puntos de colocaci\u00f3n.</p> </li> <li> <p>Que el script contenga una funcion que escala el intervalo de integraci\u00f3n.</p> </li> <li> <p>Hacer pruebas con distintos valores de N hasta alcanzar el resultado correcto.</p> </li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>|-mkdocs.yml    # The configuration file.\n|\n|-cuadrature.py # Script de python con la solucion\n|\n|-Tarea_02_Gabriel_Contreras_II_2025.ipynb # Documento final de Jupyter notebook \n|\n|-docs/\n|--|\n|--|-index.md  # The documentation homepage.\n|--|\n|--|-explanation.md # Describe el m\u00e9todo num\u00e9rico a utilizar.\n|--|\n|--|-tutorials.md # Incluye un ejemplo de uso\n|--|\n|--|-reference.md # Contiene la documentacion de las funciones.\n</code></pre>"},{"location":"explanation/","title":"Explicacion","text":"<p>La idea principal est\u00e1 dada por \\begin{align} \\int_a^b {\\rm{d}}x f(x) \\approx \\sum_{k=1}^{N+1} w_k f(x_k). \\end{align} donde:   * \\(w_k\\) son los \"pesos\"   * \\(x_k\\) son los puntos de muestreo. N\u00f3tese que usamos \\(N+1\\) puntos (es decir, \\(N\\) subregiones o subintervalos)   * Es exacta para un polinomio de orden \\((2N - 1)\\).</p> <p>Los pesos y puntos de muestreo se eligen tal que:   * \\(x_k\\) corresponden a las \\(N\\) ra\u00edces (ceros) de los polinomios de Legendre \\(P_N(x)\\) de orden \\(N\\).   * Los pesos se eligen tal que:       - \\(\\displaystyle w_k = \\left[\\frac{2}{1-x^2}\\left(\\frac{dP_N}{dx}\\right)^{-2}\\right]_{x={x_k}}\\), con \\(x_k\\) que cumple \\(P_N(x_k)=0\\)</p>"},{"location":"explanation/#polinomios-de-legendre","title":"Polinomios de Legendre","text":"<p>Los polinomios de Legendre son un sistema de polinomios ortogonales que pueden ser definidos de manera recursiva. Tenemos: \\begin{align} \\forall (M, N) \\in\\mathbb N^2, \\quad \\int_{-1}^1 {\\rm{d}}x P_N(x)P_M(x) = \\frac{2\\delta_{MN}}{2N+1}. \\end{align} Note que los polinomios est\u00e1n definidos en el intervalo \\([-1, 1]\\). Los se definen empezando con \\begin{align} P_0(x) = 1 \\Rightarrow P_1(x) = x, \\end{align} tal que los siguientes \u00f3rdenes se generan con la regla de recursividad \\begin{align} (N+1)P_{N+1}(x) = (2N+1)xP_N(x) -NP_{N-1}(x). \\end{align} Alternativamente, los polinomios pueden ser definidos de manera iterativa bajo la regla (f\u00f3rmula de Rodrigues) \\begin{align} P_N(x) = \\frac1{2^N N!}\\frac{d^N}{dx^N}\\left[(x^2-1)^N\\right]. \\end{align}</p>"},{"location":"reference/","title":"Referencia: M\u00f3dulo Cuadratura","text":"<p>Esta p\u00e1gina contiene la documentaci\u00f3n t\u00e9cnica completa del m\u00f3dulo <code>cuadrature</code>, generada autom\u00e1ticamente a partir de los docstrings. Aqu\u00ed encontrar\u00e1s detalles sobre cada funci\u00f3n, sus argumentos, valores de retorno y ejemplos de uso.</p>"},{"location":"reference/#modulo-principal-cuadrature","title":"M\u00f3dulo principal: <code>cuadrature</code>","text":""},{"location":"reference/#cuadrature.integrar_gauss","title":"<code>integrar_gauss(f, a, b, N)</code>","text":"<p>Calcula la integral definida de una funci\u00f3n usando la Cuadratura Gaussiana.</p> <p>Aproxima la integral sumando la funci\u00f3n evaluada en los nodos de Gauss multiplicada por los pesos escalados.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>function</code> <p>La funci\u00f3n a integrar, que debe aceptar un array numpy           como entrada (ej: lambda x: x**2).</p> required <code>a</code> <code>float</code> <p>L\u00edmite inferior de la integraci\u00f3n.</p> required <code>b</code> <code>float</code> <p>L\u00edmite superior de la integraci\u00f3n.</p> required <code>N</code> <code>int</code> <p>N\u00famero de puntos de Gauss (nodos) a utilizar.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>El valor aproximado de la integral.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Definimos una funci\u00f3n simple: f(x) = x^2\n&gt;&gt;&gt; def f_test(x):\n...     return x**2\n&gt;&gt;&gt; # Integramos de 0 a 1 con N=3 (el valor exacto es 0.333...)\n&gt;&gt;&gt; integrar_gauss(f_test, 0, 1, 3)\n0.3333333333333333\n</code></pre> Source code in <code>src/cuadrature.py</code> <pre><code>def integrar_gauss(f, a, b, N):\n    \"\"\"Calcula la integral definida de una funci\u00f3n usando la Cuadratura Gaussiana.\n\n    Aproxima la integral sumando la funci\u00f3n evaluada en los nodos de Gauss\n    multiplicada por los pesos escalados.\n\n    Args:\n        f (function): La funci\u00f3n a integrar, que debe aceptar un array numpy\n                      como entrada (ej: lambda x: x**2).\n        a (float): L\u00edmite inferior de la integraci\u00f3n.\n        b (float): L\u00edmite superior de la integraci\u00f3n.\n        N (int): N\u00famero de puntos de Gauss (nodos) a utilizar.\n\n    Returns:\n        float: El valor aproximado de la integral.\n\n    Examples:\n        &gt;&gt;&gt; # Definimos una funci\u00f3n simple: f(x) = x^2\n        &gt;&gt;&gt; def f_test(x):\n        ...     return x**2\n        &gt;&gt;&gt; # Integramos de 0 a 1 con N=3 (el valor exacto es 0.333...)\n        &gt;&gt;&gt; integrar_gauss(f_test, 0, 1, 3)\n        0.3333333333333333\n    \"\"\"\n    x, w = gaussxw(N)\n    xp, wp = gaussxwab(a, b, x, w)\n    return np.sum(wp * f(xp))\n</code></pre>"},{"location":"reference/#cuadrature.gaussxw","title":"<code>gaussxw(N)</code>","text":"<p>Obtiene los nodos y pesos para la Cuadratura de Gauss-Legendre en [-1, 1].</p> <p>Utiliza la implementaci\u00f3n de NumPy para calcular los puntos y pesos necesarios para el m\u00e9todo.</p> <p>Parameters:</p> Name Type Description Default <code>N</code> <code>int</code> <p>El n\u00famero de puntos de Gauss a generar.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>Una tupla con dos arrays NumPy, (x, w), que son los nodos y pesos.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; x, w = gaussxw(2)\n&gt;&gt;&gt; len(x)\n2\n</code></pre> Source code in <code>src/cuadrature.py</code> <pre><code>def gaussxw(N):\n    \"\"\"\n    Obtiene los nodos y pesos para la Cuadratura de Gauss-Legendre en [-1, 1].\n\n    Utiliza la implementaci\u00f3n de NumPy para calcular los puntos y pesos\n    necesarios para el m\u00e9todo.\n\n    Args:\n        N (int): El n\u00famero de puntos de Gauss a generar.\n\n    Returns:\n        tuple: Una tupla con dos arrays NumPy, (x, w), que son los nodos y pesos.\n\n    Examples:\n        &gt;&gt;&gt; x, w = gaussxw(2)\n        &gt;&gt;&gt; len(x)\n        2\n    \"\"\"\n    x, w = np.polynomial.legendre.leggauss(N)\n    return x, w\n</code></pre>"},{"location":"reference/#cuadrature.gaussxwab","title":"<code>gaussxwab(a, b, x, w)</code>","text":"<p>Escala los nodos y pesos de Gauss desde [-1, 1] al intervalo [a, b].</p> <p>Esto es esencial para aplicar la Cuadratura Gaussiana a cualquier intervalo \\([a, b]\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>L\u00edmite inferior del nuevo intervalo.</p> required <code>b</code> <code>float</code> <p>L\u00edmite superior del nuevo intervalo.</p> required <code>x</code> <code>ndarray</code> <p>Nodos de Gauss obtenidos para el intervalo [-1, 1].</p> required <code>w</code> <code>ndarray</code> <p>Pesos de Gauss obtenidos para el intervalo [-1, 1].</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>Una tupla con los nodos escalados (xp) y los pesos escalados (wp).</p> Source code in <code>src/cuadrature.py</code> <pre><code>def gaussxwab(a, b, x, w):\n    \"\"\"\n    Escala los nodos y pesos de Gauss desde [-1, 1] al intervalo [a, b].\n\n    Esto es esencial para aplicar la Cuadratura Gaussiana a cualquier intervalo $[a, b]$.\n\n    Args:\n        a (float): L\u00edmite inferior del nuevo intervalo.\n        b (float): L\u00edmite superior del nuevo intervalo.\n        x (np.ndarray): Nodos de Gauss obtenidos para el intervalo [-1, 1].\n        w (np.ndarray): Pesos de Gauss obtenidos para el intervalo [-1, 1].\n\n    Returns:\n        tuple: Una tupla con los nodos escalados (xp) y los pesos escalados (wp).\n    \"\"\"\n    return 0.5 * (b - a) * x + 0.5 * (b + a), 0.5 * (b - a) * w\n</code></pre>"},{"location":"reference/#cuadrature.func","title":"<code>func(x)</code>","text":"<p>Funci\u00f3n de prueba para la integraci\u00f3n num\u00e9rica.</p> <p>Esta es la funci\u00f3n \\(f(x)\\) que se desea integrar en el ejemplo de Cuadratura Gaussiana.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>(float, array)</code> <p>El punto o array de puntos donde evaluar la funci\u00f3n.</p> required <p>Returns:</p> Type Description <p>float, array: El valor de \\(x^6 - x^2 \\sin(2x)\\).</p> Source code in <code>src/cuadrature.py</code> <pre><code>def func(x):\n    \"\"\"\n    Funci\u00f3n de prueba para la integraci\u00f3n num\u00e9rica.\n\n    Esta es la funci\u00f3n $f(x)$ que se desea integrar en el ejemplo\n    de Cuadratura Gaussiana.\n\n    Args:\n        x (float, array): El punto o array de puntos donde evaluar la funci\u00f3n.\n\n    Returns:\n        float, array: El valor de $x^6 - x^2 \\sin(2x)$.\n    \"\"\"\n    return x**6 - x**2 * np.sin(2*x)\n</code></pre>"},{"location":"reference/#funciones-de-integracion","title":"Funciones de Integraci\u00f3n","text":""},{"location":"reference/#integrar_gauss","title":"<code>integrar_gauss</code>","text":"<p>Esta es la funci\u00f3n que los usuarios deben llamar para realizar la integraci\u00f3n num\u00e9rica. Su documentaci\u00f3n incluye un ejemplo de uso completo.</p> <p>Calcula la integral definida de una funci\u00f3n usando la Cuadratura Gaussiana.</p> <p>Aproxima la integral sumando la funci\u00f3n evaluada en los nodos de Gauss multiplicada por los pesos escalados.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>function</code> <p>La funci\u00f3n a integrar, que debe aceptar un array numpy           como entrada (ej: lambda x: x**2).</p> required <code>a</code> <code>float</code> <p>L\u00edmite inferior de la integraci\u00f3n.</p> required <code>b</code> <code>float</code> <p>L\u00edmite superior de la integraci\u00f3n.</p> required <code>N</code> <code>int</code> <p>N\u00famero de puntos de Gauss (nodos) a utilizar.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>El valor aproximado de la integral.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Definimos una funci\u00f3n simple: f(x) = x^2\n&gt;&gt;&gt; def f_test(x):\n...     return x**2\n&gt;&gt;&gt; # Integramos de 0 a 1 con N=3 (el valor exacto es 0.333...)\n&gt;&gt;&gt; integrar_gauss(f_test, 0, 1, 3)\n0.3333333333333333\n</code></pre> Source code in <code>src/cuadrature.py</code> <pre><code>def integrar_gauss(f, a, b, N):\n    \"\"\"Calcula la integral definida de una funci\u00f3n usando la Cuadratura Gaussiana.\n\n    Aproxima la integral sumando la funci\u00f3n evaluada en los nodos de Gauss\n    multiplicada por los pesos escalados.\n\n    Args:\n        f (function): La funci\u00f3n a integrar, que debe aceptar un array numpy\n                      como entrada (ej: lambda x: x**2).\n        a (float): L\u00edmite inferior de la integraci\u00f3n.\n        b (float): L\u00edmite superior de la integraci\u00f3n.\n        N (int): N\u00famero de puntos de Gauss (nodos) a utilizar.\n\n    Returns:\n        float: El valor aproximado de la integral.\n\n    Examples:\n        &gt;&gt;&gt; # Definimos una funci\u00f3n simple: f(x) = x^2\n        &gt;&gt;&gt; def f_test(x):\n        ...     return x**2\n        &gt;&gt;&gt; # Integramos de 0 a 1 con N=3 (el valor exacto es 0.333...)\n        &gt;&gt;&gt; integrar_gauss(f_test, 0, 1, 3)\n        0.3333333333333333\n    \"\"\"\n    x, w = gaussxw(N)\n    xp, wp = gaussxwab(a, b, x, w)\n    return np.sum(wp * f(xp))\n</code></pre>"},{"location":"reference/#funciones-auxiliares","title":"Funciones Auxiliares","text":"<p>Estas funciones son la base de la Cuadratura Gaussiana.</p>"},{"location":"reference/#gaussxw","title":"<code>gaussxw</code>","text":"<p>Obtiene los nodos y pesos para la Cuadratura de Gauss-Legendre en [-1, 1].</p> <p>Utiliza la implementaci\u00f3n de NumPy para calcular los puntos y pesos necesarios para el m\u00e9todo.</p> <p>Parameters:</p> Name Type Description Default <code>N</code> <code>int</code> <p>El n\u00famero de puntos de Gauss a generar.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>Una tupla con dos arrays NumPy, (x, w), que son los nodos y pesos.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; x, w = gaussxw(2)\n&gt;&gt;&gt; len(x)\n2\n</code></pre> Source code in <code>src/cuadrature.py</code> <pre><code>def gaussxw(N):\n    \"\"\"\n    Obtiene los nodos y pesos para la Cuadratura de Gauss-Legendre en [-1, 1].\n\n    Utiliza la implementaci\u00f3n de NumPy para calcular los puntos y pesos\n    necesarios para el m\u00e9todo.\n\n    Args:\n        N (int): El n\u00famero de puntos de Gauss a generar.\n\n    Returns:\n        tuple: Una tupla con dos arrays NumPy, (x, w), que son los nodos y pesos.\n\n    Examples:\n        &gt;&gt;&gt; x, w = gaussxw(2)\n        &gt;&gt;&gt; len(x)\n        2\n    \"\"\"\n    x, w = np.polynomial.legendre.leggauss(N)\n    return x, w\n</code></pre>"},{"location":"reference/#gaussxwab","title":"<code>gaussxwab</code>","text":"<p>Funci\u00f3n de escalado de los nodos y pesos al intervalo de integraci\u00f3n deseado \\([a, b]\\).</p> <p>Escala los nodos y pesos de Gauss desde [-1, 1] al intervalo [a, b].</p> <p>Esto es esencial para aplicar la Cuadratura Gaussiana a cualquier intervalo \\([a, b]\\).</p> <p>Parameters:</p> Name Type Description Default <code>a</code> <code>float</code> <p>L\u00edmite inferior del nuevo intervalo.</p> required <code>b</code> <code>float</code> <p>L\u00edmite superior del nuevo intervalo.</p> required <code>x</code> <code>ndarray</code> <p>Nodos de Gauss obtenidos para el intervalo [-1, 1].</p> required <code>w</code> <code>ndarray</code> <p>Pesos de Gauss obtenidos para el intervalo [-1, 1].</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>Una tupla con los nodos escalados (xp) y los pesos escalados (wp).</p> Source code in <code>src/cuadrature.py</code> <pre><code>def gaussxwab(a, b, x, w):\n    \"\"\"\n    Escala los nodos y pesos de Gauss desde [-1, 1] al intervalo [a, b].\n\n    Esto es esencial para aplicar la Cuadratura Gaussiana a cualquier intervalo $[a, b]$.\n\n    Args:\n        a (float): L\u00edmite inferior del nuevo intervalo.\n        b (float): L\u00edmite superior del nuevo intervalo.\n        x (np.ndarray): Nodos de Gauss obtenidos para el intervalo [-1, 1].\n        w (np.ndarray): Pesos de Gauss obtenidos para el intervalo [-1, 1].\n\n    Returns:\n        tuple: Una tupla con los nodos escalados (xp) y los pesos escalados (wp).\n    \"\"\"\n    return 0.5 * (b - a) * x + 0.5 * (b + a), 0.5 * (b - a) * w\n</code></pre>"},{"location":"reference/#func","title":"<code>func</code>","text":"<p>Funci\u00f3n de prueba para la integraci\u00f3n num\u00e9rica.</p> <p>Esta es la funci\u00f3n \\(f(x)\\) que se desea integrar en el ejemplo de Cuadratura Gaussiana.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>(float, array)</code> <p>El punto o array de puntos donde evaluar la funci\u00f3n.</p> required <p>Returns:</p> Type Description <p>float, array: El valor de \\(x^6 - x^2 \\sin(2x)\\).</p> Source code in <code>src/cuadrature.py</code> <pre><code>def func(x):\n    \"\"\"\n    Funci\u00f3n de prueba para la integraci\u00f3n num\u00e9rica.\n\n    Esta es la funci\u00f3n $f(x)$ que se desea integrar en el ejemplo\n    de Cuadratura Gaussiana.\n\n    Args:\n        x (float, array): El punto o array de puntos donde evaluar la funci\u00f3n.\n\n    Returns:\n        float, array: El valor de $x^6 - x^2 \\sin(2x)$.\n    \"\"\"\n    return x**6 - x**2 * np.sin(2*x)\n</code></pre>"},{"location":"tutorials/","title":"Tutorial","text":""},{"location":"tutorials/#integracion-numerica-con-cuadratura-gaussiana","title":"Integraci\u00f3n Num\u00e9rica con Cuadratura Gaussiana","text":"<p>Este tutorial te gu\u00eda sobre c\u00f3mo usar el m\u00f3dulo <code>cuadrature</code> para calcular la integral definida de una funci\u00f3n utilizando el m\u00e9todo de Cuadratura Gaussiana.</p>"},{"location":"tutorials/#el-problema-a-resolver-integracion-numerica","title":"El Problema a Resolver: Integraci\u00f3n Num\u00e9rica","text":"<p>Calcular la integral definida \\(\\int_{a}^{b} f(x) dx\\) de una funci\u00f3n compleja a menudo requiere m\u00e9todos num\u00e9ricos. El m\u00f3dulo <code>cuadrature</code> implementa la Cuadratura Gaussiana, un m\u00e9todo altamente eficiente que aproxima la integral al evaluar la funci\u00f3n en un n\u00famero peque\u00f1o de puntos \u00f3ptimos (nodos de Gauss) dentro del intervalo, logrando una alta precisi\u00f3n.</p>"},{"location":"tutorials/#la-solucion-integrar_gauss","title":"La Soluci\u00f3n: <code>integrar_gauss</code>","text":"<p>La funci\u00f3n clave es <code>integrar_gauss</code>. Est\u00e1 dise\u00f1ada para ser simple y flexible, requiriendo solo la funci\u00f3n, los l\u00edmites del intervalo y el n\u00famero de puntos de Gauss (N).</p>"},{"location":"tutorials/#referencia-de-la-funcion","title":"Referencia de la Funci\u00f3n","text":"<p>Utilizamos <code>mkdocstrings</code> para inyectar la documentaci\u00f3n extra\u00edda directamente del c\u00f3digo fuente:</p> <p>Calcula la integral definida de una funci\u00f3n usando la Cuadratura Gaussiana.</p> <p>Aproxima la integral sumando la funci\u00f3n evaluada en los nodos de Gauss multiplicada por los pesos escalados.</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>function</code> <p>La funci\u00f3n a integrar, que debe aceptar un array numpy           como entrada (ej: lambda x: x**2).</p> required <code>a</code> <code>float</code> <p>L\u00edmite inferior de la integraci\u00f3n.</p> required <code>b</code> <code>float</code> <p>L\u00edmite superior de la integraci\u00f3n.</p> required <code>N</code> <code>int</code> <p>N\u00famero de puntos de Gauss (nodos) a utilizar.</p> required <p>Returns:</p> Name Type Description <code>float</code> <p>El valor aproximado de la integral.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Definimos una funci\u00f3n simple: f(x) = x^2\n&gt;&gt;&gt; def f_test(x):\n...     return x**2\n&gt;&gt;&gt; # Integramos de 0 a 1 con N=3 (el valor exacto es 0.333...)\n&gt;&gt;&gt; integrar_gauss(f_test, 0, 1, 3)\n0.3333333333333333\n</code></pre> Source code in <code>src/cuadrature.py</code> <pre><code>def integrar_gauss(f, a, b, N):\n    \"\"\"Calcula la integral definida de una funci\u00f3n usando la Cuadratura Gaussiana.\n\n    Aproxima la integral sumando la funci\u00f3n evaluada en los nodos de Gauss\n    multiplicada por los pesos escalados.\n\n    Args:\n        f (function): La funci\u00f3n a integrar, que debe aceptar un array numpy\n                      como entrada (ej: lambda x: x**2).\n        a (float): L\u00edmite inferior de la integraci\u00f3n.\n        b (float): L\u00edmite superior de la integraci\u00f3n.\n        N (int): N\u00famero de puntos de Gauss (nodos) a utilizar.\n\n    Returns:\n        float: El valor aproximado de la integral.\n\n    Examples:\n        &gt;&gt;&gt; # Definimos una funci\u00f3n simple: f(x) = x^2\n        &gt;&gt;&gt; def f_test(x):\n        ...     return x**2\n        &gt;&gt;&gt; # Integramos de 0 a 1 con N=3 (el valor exacto es 0.333...)\n        &gt;&gt;&gt; integrar_gauss(f_test, 0, 1, 3)\n        0.3333333333333333\n    \"\"\"\n    x, w = gaussxw(N)\n    xp, wp = gaussxwab(a, b, x, w)\n    return np.sum(wp * f(xp))\n</code></pre>"},{"location":"tutorials/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<p>A continuaci\u00f3n, se muestra c\u00f3mo usar el m\u00f3dulo para integrar la funci\u00f3n \\(f(x) = x^6 - x^2 \\sin(2x)\\) en el intervalo \\([1, 3]\\), tal como se realiza en el script original.</p> <p>Nota: El m\u00e9todo de Cuadratura Gaussiana con \\(N\\) puntos es exacto para polinomios de grado hasta \\(2N-1\\). Nuestra funci\u00f3n \\(f(x)\\) no es un polinomio, por lo que la precisi\u00f3n aumenta a medida que incrementamos \\(N\\).</p>"},{"location":"tutorials/#codigo-de-ejemplo","title":"C\u00f3digo de Ejemplo","text":"<p>```python import numpy as np from cuadrature import func, integrar_gauss # Asume que tu c\u00f3digo es un m\u00f3dulo importable</p>"},{"location":"tutorials/#1-definir-los-limites-y-la-funcion","title":"1. Definir los l\u00edmites y la funci\u00f3n","text":"<p>a = 1 b = 3</p>"},{"location":"tutorials/#2-elegir-el-numero-de-puntos-n-para-la-precision","title":"2. Elegir el n\u00famero de puntos (N) para la precisi\u00f3n","text":"<p>N_puntos = 5</p>"},{"location":"tutorials/#3-calcular-la-integral","title":"3. Calcular la integral","text":"<p>I_aprox = integrar_gauss(func, a, b, N_puntos)</p>"},{"location":"tutorials/#imprimir-el-resultado","title":"Imprimir el resultado","text":"<p>print(f\"La integral de f(x) en [{a}, {b}] con N={N_puntos} es: {I_aprox:.12f}\")</p>"},{"location":"tutorials/#output-ejemplo-el-valor-real-dependera-de-la-implementacion-de-numpy","title":"Output (ejemplo, el valor real depender\u00e1 de la implementaci\u00f3n de numpy):","text":""},{"location":"tutorials/#la-integral-de-fx-en-1-3-con-n5-es-317344226721970","title":"La integral de f(x) en [1, 3] con N=5 es: 317.344226721970","text":""}]}